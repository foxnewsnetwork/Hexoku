defmodule Hexoku.API.Formation do
	alias Hexoku.Request
	@moduledoc """
	The formation of processes that should be maintained for an app.
	Update the formation to scale processes or change dyno sizes.
	Available process type names and commands are defined by the process_types attribute for the slug currently
	released on an app.

	## Attributes
	<dl>
		<dt>id</dt> <dd>unique identifier of item generated by Heroku</dd>
		<dt>command</dt> <dd>command to use to launch this process</dd>
		<dt>quantity</dt> <dd>number of processes to maintain</dd>
		<dt>size</dt> <dd>dyno size (default: "1X")</dd>
		<dt>type</dt> <dd>type of process to maintain</dd>
		<dt>created_at</dt> <dd>when item was created</dd>
		<dt>updated_at</dt> <dd>when item was last modified</dd>
	</dl>

	For more info read the [Heroku API Reference](https://devcenter.heroku.com/articles/platform-api-reference#formation)
	"""

	@doc """
	List process type formation.

	## Examples
		client |> Hexoku.API.Formation.TODO("myapp")
	"""
	@spec list(Hexoku.Client.t, binary) :: [Map.t]
	def list(client, app), do: Request.get(client, "/apps/#{app}/formation")

	@doc """
	Info for a process type.

	## Examples
		client |> Hexoku.API.Formation.info("myapp", "web")
	"""
	@spec info(Hexoku.Client.t, binary, binary) :: Map.t
	def info(client, app, formation), do: Request.get(client, "/apps/#{app}/formation/#{formation}")

	@doc """
	TODO: Write This Doc.

	## Examples
		client |> Hexoku.API.Formation.update("myapp", "web", 4, "2X")
		client |> Hexoku.API.Formation.update("myapp", "web", 2)
	"""
	@spec update(Hexoku.Client.t, binary, binary, integer, binary) :: Map.t
	def update(client, app, formation, quantity, size \\ "1X") do
		Request.patch(client, "/apps/#{app}/formation/#{formation}", %{
			quantity: quantity,
			size: size
		})
	end

	@doc """
	Batch update process types.

	## Examples
		client |> Hexoku.API.Formation.batch_update("myapp", [
			%{process: "web", quantity: 4, size: "2X"},
			%{process: "worker", quantity: 1, size: "1X"}
		])
	"""
	@spec batch_update(Hexoku.Client.t, binary, [Map.t]) :: Map.t
	def batch_update(client, app, updates) do
		Request.patch(client, "/apps/#{app}/formation", %{
			updates: updates
		})
	end

end
