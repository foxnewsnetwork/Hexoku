defmodule Hexoku.API.Builds do
	alias Hexoku.Request
	@moduledoc """
	A build represents the process of transforming a code tarball into a slug

	## Attributes
	<dl>
		<dt>id</dt> <dd>unique identifier of item generated by Heroku</dd>
		<dt>slug</dt> <dd>slug created by this build</dd>
		<dt>slug:id</dt> <dd>unique identifier of slug</dd>
		<dt>source_blob:url</dt> <dd>URL where gzipped tar archive of source code for build was downloaded.</dd>
		<dt>source_blob:version</dt> <dd>Version of the gzipped tarball.</dd>
		<dt>status</dt> <dd>status of build. ["failed", "pending", "succeeded"]</dd>
		<dt>user:email</dt> <dd>email address of account</dd>
		<dt>user:id</dt> <dd>unique identifier of user</dd>
		<dt>created_at</dt> <dd>when item was created</dd>
		<dt>updated_at</dt> <dd>when item was last modified</dd>
	</dl>

	For more info read the [Heroku API Reference](https://devcenter.heroku.com/articles/platform-api-reference#build)
	"""

	@doc """
	List existing builds.

	## Examples
		client |> Hexoku.API.Builds.list("myapp")
	"""
	@spec list(Hexoku.Client.t, binary) :: [Map.t]
	def list(client, app), do: Request.get(client, "/apps/#{app}/builds")

	@doc """
	Info for existing build.

	## Examples
		client |> Hexoku.API.Builds.info("myapp", "01234567-89ab-cdef-0123-456789abcdef")
	"""
	@spec info(Hexoku.Client.t, binary, binary) :: Map.t
	def info(client, app, build), do: Request.get(client, "/apps/#{app}/builds/#{build}")

	@doc """
	Create a new build

	## Examples
		client |> Hexoku.API.Builds.create(
			"myapp",
			"https://example.com/source.tgz?token=xyz",
			"v1.3.0"
		)
	"""
	@spec create(Hexoku.Client.t, binary, binary, binary) :: Map.t
	def create(client, app, url, version) do
		Request.post(client, "/apps/#{app}/builds", %{source_blob: %{
			url: url,
			version: version
		}})
	end

end
